/**
 * Database_functions.js
 * This module contains functions needed to access the database 
 */

var mysql = require('mysql'),
	SaleObject = require('./SaleObject'),
	Logger = require('./Logger.js'),
	fs = require("fs");
var connectionDetails = {};

connectionDetails['host'] = "127.0.0.1";
connectionDetails['user'] = "root";
connectionDetails['password'] = "password";
connectionDetails['database'] = "highjinx-database";

var connectionMade = false;
var logFile = "./logs/run.log";
var pool = null;
var usePool = false;
Logger.setLogFile(logFile);

function getConnectionDetails(file) {
	fs.readFile(file, 'utf8', function(err, data) {
		if(err) {
			//use defaultConnectionDetails
			if(usePool) {
				createPool();
			}
		} else {
			var lines = data.split("\n");
			for (var i = 0; i < lines.length; i++) {
				var string = lines[i].split(":");
				var key = string[0];
				var value = string[1];
				connectionDetails[key] = value;
			}
			
		}
	});
	
	var interval = 1 * 1000;
	var intervalFn = null;
	intervalFn = setInterval(function(){
		if(connectionDetails['usePool'] == 'true') {
			usePool = true;
			createPool();
		}
		clearInterval(intervalFn);
	}, interval);
	
	
}

exports.setConnectionDetails = function(settings) {
	setConnectionDetails(settings);
	Logger.log(0, 'New connection details ' + settings);
};

function setConnectionDetails(settings) {
	connectionDetails = settings;
}

function createPool() {
	Logger.log(0, "Creating pool");
	if (pool == null) {
		pool = mysql.createPool({
			host : connectionDetails['host'],
			user : connectionDetails['user'],
			password : connectionDetails['password'],
			database : connectionDetails['database']
		});
		pool.on('connection', function(connection){
			Logger.log(0, "Created pool succesfully!");
		});
	}	
}

/*
 * This function creates a new connection to the database.
 * Connection details are provided from the map connectionDetails
 */
function connectToDatabase() {
	var connection;
	Logger.log(0, 'Creating connection to the databsase');
	connection = mysql.createConnection({
		host : connectionDetails['host'],
		user : connectionDetails['user'],
		password : connectionDetails['password'],
		database : connectionDetails['database']
	});
	connection.connect(function (err){
		connection.on('err', function() {
			Logger.log(-1,'Cannot connect to the database');
		});
		connectionMade = true;
		connection.setMaxListeners(200);
	});
	return connection;
}
/*
 * This function executes a query that gets the Count(*) from SaleObjects table
 */
function getCount(connection) {
	if (connection == null)
		connectToDatabase();
	Logger.log(0, 'Getting count from the database');
	var sqlQuery = 'SELECT count(*) FROM SaleObjects';	
	var query = connection.query(sqlQuery);
	Logger.log(0, "Executing query '" + query.sql + "'");
	var count = 0;
	query
	.on('result', function(row) {
		count = row['count(*)'];
	})
	.on('end', function() {
		console.log(count);
		// closeConnection();
		return count;
	});	
}


/*
 * This function checks whether the object is in the database or not
 * arguments:
 * 	object - SaleObject
 */
function exists(object) {
	var sqlQuery = 'SELECT count(*) FROM SaleObjects WHERE link = ?';
	var query = connection.query(sqlQuery, [object.link]);
	Logger.log(0, "Executing query '" + query.sql + "'");
	var count = -1;
	query
	.on('result', function(row){
		count = row['count(*)'];
	})
	.on('end', function() {
		if (count != 0)
			exists =  true;
		exists =  false;
		closeConnection(connection)
	});	
}

/*
 * This function executes the query to insert a single SaleObject into the database.
 * If the item doesn't exists in the database, assuming links are unique, it is inserted.
 * arguments:
 * 	object - SaleObject needed to be inserted
 * 	callback - Function to be called when insertion query is done execution
 *	count2 -  
 *	num - 
 */
function insertSingleItemIntoDatabase(object, connection) {
	if (object != null) {
		var sqlQuery = 'SELECT count(*) FROM SaleObjects WHERE link = ?';
		var query = connection.query(sqlQuery, [object.link]);
		Logger.log(0, "Executing query '" + query.sql + "'");
		var count = -1;
		query
		.on('result', function(row){
			count = row['count(*)'];	
		})
		.on('end', function() {
			if (count == 0) {
				var sqlQuery = "INSERT into SaleObjects (title, link, description, imageLink, dateAdded, pageNumber) values(?, ?, ?, ?, NOW(), ?)";
				var query = connection.query(sqlQuery, [object.getTitle(), object.getLink(), object.getDescription(), object.getImage(), object.getPageNumber()]);
				Logger.log(0, "Executing query '" + query.sql + "'");
				query.on('end' ,function() {
					Logger.log(0, "Succesfully inserted item into the database");
					closeConnection(connection);
				});
			}else {
				Logger.log(0, "This item exists in the database " + count);	
				closeConnection(connection);
			}
		});
	}
}


exports.insertSingleItemIntoDatabase = function(object) {
	
	if(usePool) {
		pool.getConnection(function(err, poolConnection) {
			insertSingleItemIntoDatabase(object, poolConnection);
		});
	} else {
		var connection = connectToDatabase();
		insertSingleItemIntoDatabase(object, connection);
	}
};

/*
 * This function inserts SaleObjects from objects array into the database;
 * arguments:
 *	 objects - Array of SaleObjects
 */
function insertIntoDatabase(objects, connection) {
		for (var i = 0; i < objects.length; i++) {
			var object = objects[i];
			insertSingleItemIntoDatabase(object, connection);
		}
}

exports.insertIntoDatabase = function(objects) {
	if(usePool) {
		pool.getConnection(function(err, poolConnection) {
			insertIntoDatabase(objects);
		});
	} else {
		var connection = connectToDatabase();
		insertIntoDatabase(objets, connection);
	}
};

/*
 * This function is for retrieving items from the database and load it into the passed objects array.
 */
function getObjectsFromDatabase(objects, callback, callback2, connection) {
	var sqlQuery = 'SELECT * FROM SaleObjects ORDER BY pageNumber';	
	var query = connection.query(sqlQuery);
	Logger.log(0, "Executing query '" + query.sql + "'");
	query
	.on('result', function(row){
		var object = new SaleObject(row['title'], row['link'], row['description'], row['imageLink']);
		objects.push(object);
	})
	.on('end', function() {
		closeConnection(connection);
		if (objects.length != -1)
			Logger.log(0, "Retrieved " + objects.length + " objects from the database");
		else 
			Logger.log(-1, "Error retrieving");
		if (callback2)
			callback(objects, callback2);
		else 
			callback(objects);
		
	});	
}

exports.getObjectsFromDatabase = function(objects, callback, callback2) {
	
	if(usePool) {
		pool.getConnection(function(err, poolConnection) {
			getObjectsFromDatabase(objects, callback, callback2, poolConnection);
		});
	} else {
		var connection = connectToDatabase();
		getObjectsFromDatabase(objects, callback, callback2, connection);
	}
};

function getObjectsFromDatabaseWithResponse(objects, callback, response, connection) {
	var sqlQuery = 'SELECT * FROM SaleObjects ORDER BY dateAdded DESC';	
	var query = connection.query(sqlQuery);
	Logger.log(0, "Executing query '" + query.sql + "'");
	query
	.on('result', function(row){
		var object = new SaleObject(row['title'], row['link'], row['description'], row['imageLink']);
		objects.push(object);
	})
	.on('end', function() {
		closeConnection(connection);
		if (objects.length != -1)
			Logger.log(0, "Retrieved " + objects.length + "objects from the database");
		else 
			Logger.log(-1, "Error retrieving");
		callback(objects, response);
	});
}

exports.getObjectsFromDatabaseWithResponse = function(objects, callback, response) {
	if (usePool) {
		pool.getConnection(function(err, poolConnection) {
			getObjectsFromDatabaseWithResponse(objects, callback, response, poolConnection);
		});
	} else {
		var connection = connectToDatabase();
		getObjectsFromDatabaseWithResponse(objects, callback, response, connection);
	}
};

/*
 * This function is for updating the database. Given the interval (24).
 * The items that were added more than the given interval, are deleted.
 */
function updateDatabase(callback, callback2, connection) {
	var count = -1;
	Logger.log(0, "Updating database");
	var sqlQuery = 'SELECT count(*) FROM SaleObjects WHERE dateAdded < DATE_SUB(NOW(), INTERVAL 24 HOUR)';
	var query = connection.query(sqlQuery);
	Logger.log(0, "Executing query '" + query.sql + "'");
	query
	.on('result', function(row) {
		count = row['count(*)'];
	})
	.on ('end', function() {
		if (count != 0) {
			if (callback2)
				deleteOldEntries(callback, callback2, connection);
			else
				deleteOldEntries(callback, null, connection);
		}else {
			Logger.log(0, 'No need to delete from database');
			closeConnection(connection);
			if (callback2 && callback)
				callback(callback2);
			else if (callback)
				callback();
			Logger.log(0, 'Done updating the database');
		}
		
	});
}
exports.updateDatabase = function(callback, callback2) {
	if(usePool) {
		pool.getConnection(function(err, poolConnection) {
			updateDatabase(callback, callback2, poolConnection);
		});
	} else {
		var connection = connectToDatabase();
		updateDatabase(callback, callback2, connection);
	}
};
/*
 * This function updates the Updates table based on the items added in the last 10 minutes;
 */
function addUpdate(connection) {
	var count = -1;
	
	var sqlQuery = "SELECT count(*) as totalCount FROM"
				+ "("
				+ "SELECT TIMEDIFF(CURRENT_TIMESTAMP(), dateAdded) AS timeDifference FROM SaleObjects HAVING timeDifference < '00:10:00'"
				+ ") AS table1";
	var query = connection.query(sqlQuery);
	Logger.log(0, "Executing query '" + query.sql + "'");
	query
	.on('result', function(row) {
		count = row['totalCount'];
	})
	.on ('end', function() {
		if (count != 0) {
			var sqlQuery = "INSERT INTO Updates (dateUpdated, itemsAdded)" 
						+ 	"(SELECT CURRENT_TIMESTAMP(), count(*) FROM "
						+ 	"("
						+ 		"SELECT TIMEDIFF(CURRENT_TIMESTAMP(), dateAdded) AS timeDifference FROM SaleObjects HAVING timeDifference < '00:10:00'"
						+ 	") 	AS table1"
						+	")";
			var query = connection.query(sqlQuery);
			Logger.log(0, "Executing query '" + query.sql + "'");
			query
			.on ('end', function() {
				Logger.log('Added update');
				closeConnection(connection);
			});
		} else if (count == 0) {
			Logger.log('No updates');
		}
	});
}

exports.addUpdate = function (){
	addUpdate();
};

/*
 * This function is for deleting entries from the database that were added more than the given interval hours ago.
 */
function deleteOldEntries(callback, callback2, connection) {
	Logger.log(0, "Deleting from the database");
	var sqlQuery = 'DELETE FROM SaleObjects WHERE dateAdded < DATE_SUB(NOW(), INTERVAL 24 HOUR);';
	var query = connection.query(sqlQuery);
	Logger.log(0, "Executing query '" + query.sql + "'");
	query
	.on('end', function() {
		closeConnection(connection);
		Logger.log(0, "Done deleting from database");
		// connection.end();
		Logger.log(0, 'Done updating the database');
		if (callback2 && callback)
			callback(callback2);
		else if (callback)
			callback();
		
	});
};

function closeConnection() {
	Logger.log(0,"Closing connection");
	if (connection != null) {
		connection.end();
		connectionMade = false;
	}
}

exports.closeConnection = function() {
	closeConnection();
};

exports.openConnection = function() {
	connectToDatabase();
};

function keepAlive() {
	connectToDatabase();
	connection.query('select 1', [] , function(err, result) {
		if (err) return console.log(err);
	});
}

function searchDatabase(searchText, callback) {
	var tempSearchText = "\'%" + searchText + "%\'";
	if(!connectionMade)
		connectToDatabase();
	var sqlQuery = "SELECT * FROM SaleObjects WHERE TITLE LIKE ?";
	var query = connection.query(sqlQuery, tempSearchText);
	Logger.log(0, "Executing query '" + query.sql + "'");
	query
	.on('result', function(row){
		var object = new SaleObject(row['title'], row['link'], row['description'], row['imageLink']);
		objects.push(object);
	})
	.on('end', function() {
		if (objects.length != -1)
			Logger.log(0, "Retrieved " + objects.length + " objects from the database");
		closeConnection(connection);
		callback(objects);
	});	
}

exports.searchDatabase = function(searchText, callback) {
	searchDatabase(searchText, callback);
};

function closeConnection(connection) {
	if (usePool) 
		connection.release();
	else 
		connection.end();	
}

getConnectionDetails("./connection.cfg");

